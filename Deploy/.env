# ------------ Database Cassandra Configuration --------------- #
CASSANDRA_CONTAINER_PORT=9042
CASSANDRA_LOCAL_PORT=9042 # DO NOT USE!! only to insert new organization
CASSANDRA_HOST=database-cassandra
CASSANDRA_DATA_PATH=/var/lib/cassandra

# ------------ Keyspace Configuration --------------- #
AUTH_KEYSPACE=auth
H3_INDEX_KEYSPACE=h3_index
APP_DATA_KEYSPACE=app_data

# ------------ Database MinIO Configuration --------------- #
MINIO_ADMIN_WEBSITE_LOCAL_PORT=9001
MINIO_ADMIN_WEBSITE_CONTAINER_PORT=9001
MINIO_LOCAL_PORT=9000
MINIO_CONTAINER_PORT=9000
MINIO_HOST=database-minio
MINIO_ROOT_USER=admin123
MINIO_ROOT_PASSWORD=admin123
MINIO_DATA_PATH=/data

# ------------ Bucket Coniguration --------------- #
PHOTOS_BUCKET_NAME=photos-bucket
VIDEOS_BUCKET_NAME=videos-bucket

# ------------ Environment Configuration --------------- #
MAX_OCCURRENCES_SCROLL_MOBILE_LIST_PAGE=10
MAX_OCCURRENCES_SCROLL_WEBSITE_LIST_PAGE=20
AVAILABLE_STATUS=["pending", "in_progress", "resolved"]

# ------------ Auth Configuration --------------- #
SECRET_KEY=add-key-here
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRES_MINUTES=30
REFRESH_TOKEN_EXPIRES_DAYS=150 

# ------------ H3 Index Configuration --------------- #
H3_INCIDENT_RESOLUTION=13
H3_ORGANIZATION_MINIMUM_RESOLUTION=6
H3_ORGANIZATION_MAXIMUM_RESOLUTION=13


SENDGRID_API_KEY=add-key-here
FIX_AI_EMAIL=fix.ai.app@gmail.com


# ------------ LLM Configuration --------------- #
GEMINI_API_KEY = add-key-here
DESCRIPTION_CATEGORY_SEVERITY_SYS_INSTRUCTION = "You are reporting issues.
Analyze the image and return a JSON object with keys 'description', 'category', and 'severity'. 
Use %s for language, classify the issue as one of the categories in this list %s, and assign a severity level ['low', 'medium', 'high'].
If you think the problem does not fit into any of the categories in the provided list, return a JSON object with 'description' key with the value 'false', 'category' key with the value 'false', and 'severity' key with the value 'false'. 
Begin the 'description' with a general greeting that includes an introduction.
In description, your task is to **describe the urban problem as if you are witnessing the scene firsthand**. Be concise and clear in your description without being verbose.
Focus solely on the issue without using offensive language."
INCIDENT_DESCRIPTION_SIMILARITY_INSTRUCTION = "Your task is to evaluate the semantic similarity between a reference incident description and a set of other incident descriptions.
**Reference Incident:** '%s'
**Analyze the following incident descriptions and determine the most similar one to the reference incident:**
%s
**Output:** Return a JSON object containing the 'similar_incident_id' of the most similar incident and its 'similarity_percentage' (a numerical value between 0 and 100, inclusive).
**Constraints:**
* The similarity should be based on the meaning and context of the descriptions.
* Return only the JSON object. Do not include any other text or explanations."
INCIDENT_DESCRIPTION_SIMILARITY_THRESHOLD = 90.0
MERGE_DESCRIPTION_CATEGORY_SEVERITY_SYS_INSTRUCTION = "You are reporting issues.
Analyze the image and return a JSON object with keys 'description' and 'severity'.
Use %s for language and assign a severity level ['low', 'medium', 'high']
Combine the new occurrence description and image to obtain a new main description. 
In description, your task is to analyze the image and describe the problem. Ignore any initial greeting or introductory phrases that might be present in the provided description. Be concise and clear in your description without being verbose.
Focus solely on the issue without using offensive language. 
Combine the new occurrence description and image to obtain a new severity."
CHECK_INCIDENT_RESOLVED_FROM_VIDEO_SYS_INSTRUCTION = "You are a reports resolver.
Analyze the image, description and category of the problem and a video with the current situation.
Return a JSON object with 'resolved' with the value 'true' or 'false'. Don't include any other text or explanations.
You need to check if the problem is resolved or not. Having 100% confidence is required.
It is better to say 'false' if you are not sure."
DEFAULT_CATEGORY="others"
DEFAULT_SEVERITY="low"

# ------------ Zookeeper Configuration --------------- #
ZOOKEEPER_IP=zookeeper
ZOOKEEPER_CONTAINER_PORT=2181
ZOOKEEPER_TICK_TIME=2000

# ------------ Kafka Configuration --------------- #
KAFKA_IP=kafka
KAFKA_CONTAINER_PORT=29092

KAFKA_REPLICATION_FACTOR=1
KAFKA_RETENTION_MS=60000 # 1 minute
KAFKA_RETENTION_BYTES=-1
KAFKA_RETENTION_CHECK_INTERVAL_MS=500

# ------------ Kafka Broker Configuration ------------ #
KAFKA_BROKER_ID=1
KAFKA_BROKER_PORT=9092

# ------------ LLM Kafka Configuration --------------- #
LLM_BOOTSTRAP_SERVERS=[${KAFKA_IP}:${KAFKA_BROKER_PORT}]
DESCRIPTION_CATEGORY_SEVERITY_TOPIC=ai_description_category_severity
JOB_CLUSTERING_TOPIC=ai_job_clustering
CHECK_INCIDENT_RESOLVED_TOPIC=ai_check_incident_resolved
LLM_GROUP_ID=ai-llm-group
LLM_GROUP_INSTANCE_ID_DESCRIPTION=ai_worker_description
LLM_GROUP_INSTANCE_ID_CLUSTERING=ai_worker_clustering
LLM_GROUP_INSTANCE_ID_CHECK_INCIDENT=ai_worker_check_incident

# ------------ Nginx Configuration --------------- #
CONF_VOLUME=/etc/nginx/conf.d
HTML_VOLUME=/usr/share/nginx/html
CERTS_VOLUME=/etc/nginx/certs

# ------------ API Configuration --------------- #
API_CONTAINER_PORT=8000
ENDPOINTS_PREFIX=/api/v1
INCIDENT_TTL=300

# ------------ Deploy Configuration --------------- #
NGINX_LOCAL_PORT=80
NGINX_CONTAINER_PORT=80
HTTPS_ENABLED=false

# ------------ Redis PubSub Configuration --------------- #
REDIS_HOST=redis-cache
REDIS_LOCAL_PORT=6379
REDIS_CONTAINER_PORT=6379
CACHE_DATA_PATH=/data
REDIS_TTL_SEC_NEARBY_INCIDENTS=60
